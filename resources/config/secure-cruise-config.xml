<?xml version="1.0" encoding="UTF-8"?>
<!-- *************************GO-LICENSE-START******************************
 * Copyright 2018 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *************************GO-LICENSE-END******************************* -->

<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="121">
    <server artifactsdir="artifacts" commandRepositoryLocation="default" serverId="gauge" tokenGenerationKey="token">
        <security>
          <authConfigs>
              <authConfig id="61f10215-9fba-4962-a2f4-d6c8944ade32" pluginId="cd.go.authentication.passwordfile">
                  <property>
                      <key>PasswordFilePath</key>
                      <value>$password_properties</value>
                  </property>
              </authConfig>
          </authConfigs>
            <roles>
                <role name="admins">
                    <users>
                        <user>admin</user>
                        <user>pipelineSelectorAdmin</user>
                    </users>
                </role>
                <role name="operator">
                    <users>
                        <user>operatorUser</user>
                    </users>
                </role>
                <role name="viewer">
                    <users>
                        <user>view</user>
                        <user>operate</user>
                    </users>
                </role>
                <role name="misc">
                    <users>
                        <user>group1View</user>
                    </users>
                 </role>
            </roles>
            <admins>
                <role>admins</role>
            </admins>
        </security>
    </server>
    <config-repos>
       <config-repo id="config-repo" pluginId="json.config.plugin">
         <git url="material-for-pipeline-git-config-repo" />
       </config-repo>
    </config-repos>
    <pipelines group="VSM.Analytics">
     <authorization>
      <view>
        <user>group1Admin</user>
        <user>view</user>
        <user>operatorUser</user>
      </view>
      <admins>
        <user>group1Admin</user>
      </admins>
     </authorization>

        <pipeline name="VSM1">
            <materials>
                <git url="material-for-pipeline_VSM1" dest="git" materialName="git" autoUpdate="true"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                     <tasks>
                          <exec command="sleep">
                            <arg>5</arg>
                            <runif status="passed"/>
                          </exec>
                     </tasks>
                   </job>
                </jobs>
            </stage>
        </pipeline>
         <pipeline name="VSM2">
            <materials>
                 <pipeline pipelineName="VSM1" stageName="defaultStage" materialName="VSM1" />
            </materials>
            <stage name="defaultStage">
                 <jobs>
                  <job name="defaultJob">
                     <tasks>
                          <exec command="sleep">
                            <arg>5</arg>
                            <runif status="passed"/>
                          </exec>
                     </tasks>
                 </job>
                </jobs>
            </stage>
       </pipeline>
      <pipeline name="VSM3">
       <materials>
        <pipeline pipelineName="VSM1" stageName="defaultStage" materialName="VSM1" />
        <git url="material-for-pipeline_VSM3" dest="git" materialName="git" autoUpdate="true"/>
       </materials>
       <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
           <tasks>
              <exec command="sleep">
                 <arg>5</arg>
                 <runif status="passed"/>
              </exec>
           </tasks>
          </job>
        </jobs>
       </stage>
     </pipeline>
     <pipeline name="VSM4">
      <materials>
        <pipeline pipelineName="VSM2" stageName="defaultStage" materialName="VSM2" />
        <pipeline pipelineName="VSM3" stageName="defaultStage" materialName="VSM3" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sleep">
                 <arg>5</arg>
                 <runif status="passed"/>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="VSM.Analytics.Rerun">
    <pipeline name="Rerun1">
      <materials>
         <git url="material-for-pipeline_R1" dest="git" materialName="git" autoUpdate="true"/>
      </materials>
      <stage name="defaultStage">
        <approval type="manual"/>
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sleep">
                <arg>5</arg>
                <runif status="passed"/>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Rerun2">
      <materials>
        <pipeline pipelineName="Rerun1" stageName="defaultStage" materialName="Rerun1" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sleep">
                <arg>5</arg>
                <runif status="passed"/>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Rerun3">
      <materials>
        <pipeline pipelineName="Rerun1" stageName="defaultStage" materialName="Rerun1" />
        <git url="material-for-pipeline_R3" dest="git" materialName="git" autoUpdate="true"/>
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
             <tasks>
                <exec command="rake" args="wait_or_fail" workingdir="git"/>
             </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Rerun4">
      <materials>
        <pipeline pipelineName="Rerun2" stageName="defaultStage" materialName="Rerun2" />
        <pipeline pipelineName="Rerun3" stageName="defaultStage" materialName="Rerun3" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sleep">
                <arg>5</arg>
                <runif status="passed"/>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
    <pipelines group="admin-only">
    <authorization>
        <admins>
          <user>admin</user>
          <user>group1Admin</user>
        </admins>
      </authorization>
      <pipeline name="admin-pipeline-api">
            <materials>
                <git url="material-for-admin-pipeline-api" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                      <exec command="ls"/>
                    </tasks>
                </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="admin-pipeline" lockBehavior="lockOnFailure">
            <materials>
                <git url="material-for-admin-pipeline" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                    <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                    </tasks>
                </job>
                </jobs>
            </stage>
            <stage name="secondStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                    <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                    </tasks>
                </job>
                </jobs>
            </stage>
            </pipeline>
    </pipelines>
    <pipelines group="viewable">
        <authorization>
            <view>
                <role>viewer</role>
                <role>operator</role>
            </view>
            <operate>
                <user>operate</user>
                <role>operator</role>
            </operate>
        </authorization>
        <pipeline name="failing-pipeline">
          <materials>
            <git url="material-for-failing-pipeline" dest="git" materialName="gitMaterial" autoUpdate="false"/>
          </materials>
          <stage name="defaultStage">
            <approval type="manual"/>
            <jobs>
              <job name="defaultJob">
                <tasks>
                  <exec command="rake" args="wait_and_fail" workingdir="git"/>
                </tasks>
              </job>
            </jobs>
          </stage>
        </pipeline>
        <pipeline name="viewable-pipeline">
             <materials>
                <git url="material-for-viewable-pipeline" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                     <tasks>
                          <exec command="sleep">
                            <arg>5</arg>
                            <runif status="passed"/>
                          </exec>
                     </tasks>
                   </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="pipeline-with-stage-security">
            <materials>
                <hg url="material-for-pipeline-with-stage-security" dest="hg" autoUpdate="false"/>
            </materials>
            <stage name="first">
                <approval type="manual">
                    <authorization>
                        <user>operate</user>
                        <role>operator</role>
                    </authorization>
                </approval>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <ant target="run.till.file.exists" workingdir="hg/dev"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="pipeline-with-auto-stage-security">
            <materials>
                <git url="material-for-pipeline-with-stage-security" dest="git" autoUpdate="false"/>
            </materials>
            <stage name="first">
                <approval type="success">
                    <authorization>
                        <user>operate</user>
                        <role>operator</role>
                    </authorization>
                </approval>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                          <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                      </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="2-stage-viewable">
            <materials>
                <git url="material-for-2-stage-viewable-pipeline" dest="git" autoUpdate="false"/>
            </materials>
            <stage name="first">
                <approval type="manual">
                    <authorization>
                        <user>operate</user>
                    </authorization>
                </approval>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="second">
                <approval type="manual">
                    <authorization>
                        <user>admin</user>
                    </authorization>
                </approval>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="open-to-all">
        <pipeline name="manual-stages-that-run-till-file-exists">
            <materials>
                <git url="material-for-manual-stages-that-run-till-file-exists" dest="git" materialName="gitMaterial" autoUpdate="false"/>
            </materials>
            <stage name="firstStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                    <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                    </tasks>
                </job>
                </jobs>
            </stage>
            <stage name="secondStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                    <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                    </tasks>
                </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="basic-pipeline-for-cctray">
         <materials>
          <git url="material-for-basic-pipeline-for-cctray" dest="git" autoUpdate="false" materialName="git-material"/>
         </materials>
         <stage name="defaultStage">
            <approval type="manual"/>
            <jobs>
              <job name="basic-pipeline-for-cctray-job">
               <tasks>
                    <exec command="rake" args="wait_or_fail" workingdir="git"/>
               </tasks>
              </job>
              <job name="passing-job">
                <tasks>
                    <exec command="sleep">
                      <arg>15</arg>
                      <runif status="passed"/>
                    </exec>
                </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    </pipelines>
    <pipelines group="basic">
      <authorization>
        <admins>
          <user>group1Admin</user>
        </admins>
        <operate>
                <user>operate</user>
       </operate>
          <view>
              <role>viewer</role>
              <role>operator</role>
          </view>
      </authorization>
           <pipeline name="pipeline-with-elastic-agent-profile">
            <materials>
                 <git url="https://github.com/gocd/ruby-functional-tests.git" shallowClone="true" dest="git" materialName="git" autoUpdate="true"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual" />
                 <jobs>
                  <job name="defaultJob">
                     <tasks>
                          <exec command="ls">
                          </exec>
                     </tasks>
                 </job>
                </jobs>
            </stage>
       </pipeline>
     <pipeline name="downstream-pipeline">
      <materials>
        <pipeline pipelineName="basic-pipeline-fast" stageName="defaultStage"/>
        <git url="material-for-downstream-pipeline" dest="git" materialName="downstream_git_material">
          <filter>
            <ignore pattern="**/*"/>
          </filter>
        </git>
      </materials>
      <stage name="defaultStage">
        <approval type="manual"/>
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="ls"/>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
      <pipeline name="pipeline-artifacts">
      <materials>
        <git url="material-for-pipeline-artifacts" materialName="junit-pipeline-artifacts" autoUpdate="false"/>
      </materials>
      <stage name="defaultStage">
        <approval type="manual"/>
        <jobs>
          <job name="Job1">
            <tasks>
              <exec command="mkdir" args="subfolder"/>
              <exec command="touch" args="subfolder/file"/>
              <exec command="touch" args="something.jar"/>
              <exec command="touch" args="some.txt.thing"/>
              <exec command="touch" args="something.zip"/>
              <exec command="touch" args="subfolder/another.zip"/>
            </tasks>
            <artifacts>
              <artifact type="build" src="subfolder/*.*" dest="file-with-dot-in-subfolder"/>
              <artifact type="build" src="*.jar" dest="jarfolder"/>
              <artifact type="build" src="*.txt.*" dest="zipfolder"/>
              <artifact type="build" src="subfolder/*" dest="all-in-subfolder"/>
              <artifact type="build" src="**/*.zip" dest="allzip"/>
              <artifact type="build" src="**/*.not-exists" dest="not-exists"/>
            </artifacts>
          </job>
        </jobs>
      </stage>
      <stage name="second">
        <approval type="manual"/>
        <jobs>
          <job name="Job2">
            <tasks>
              <fetchartifact artifactOrigin="gocd" stage="defaultStage" job="Job1" srcdir="file-with-dot-in-subfolder" dest="file-with-dot-in-subfolder-new"/>
              <fetchartifact artifactOrigin="gocd" stage="defaultStage" job="Job1" srcdir="jarfolder" dest="jarfolder-new"/>
              <fetchartifact artifactOrigin="gocd" stage="defaultStage" job="Job1" srcdir="zipfolder" dest="zipfolder-new"/>
              <fetchartifact artifactOrigin="gocd" stage="defaultStage" job="Job1" srcdir="all-in-subfolder" dest="all-in-subfolder-new"/>
              <fetchartifact artifactOrigin="gocd" stage="defaultStage" job="Job1" srcdir="allzip" dest="allzip-new"/>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
        <pipeline name="basic-pipeline-with-git-material">
            <materials>
                <git url="material-for-basic-pipeline-with-git-material" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="sleep">
                                <arg>5</arg>
                                <runif status="passed"/>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="P1">
            <materials>
                <git url="material-for-analytics" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                        <exec command="rake" args="wait_or_fail" workingdir="git"/>
                    </tasks>
                    <resources>
                        <resource>R1</resource>
                    </resources>

                </job>
                </jobs>
            </stage>
            </pipeline>
        <pipeline name="P2">
            <materials>
                <git url="material-for-analytics" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                    <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                    </tasks>
                    <resources>
                        <resource>R2</resource>
                    </resources>
                </job>
                </jobs>
            </stage>
            </pipeline>
        <pipeline name="basic-pipeline-with-all-materials">
          <materials>
           <hg url="http://Non-existing-material" dest="hg" materialName="hg" autoUpdate="false"/>
           <svn url="http://Non-existing-material" dest="svn" materialName="svn" autoUpdate="false"/>
           <git url="http://Non-existing-material" dest="git" materialName="git" autoUpdate="false"/>
           <p4 port="http://nonexisting:6578" useTickets="true" dest="p4" materialName="p4" autoUpdate="false">
           <view>//depot/... //p4test_1/...</view>
            <filter>
             <ignore pattern="*.ignore"/>
            </filter>
           </p4>
          </materials>
          <stage name="defaultStage">
           <jobs>
            <job name="defaultJob">
             <tasks>
              <exec command="sleep" args="15"/>
             </tasks>
           </job>
           </jobs>
          </stage>
         </pipeline>
         <pipeline name="pipeline-with-3-stages" lockBehavior="lockOnFailure">
            <materials>
                 <git url="material-for-pipeline-with-3-stages" dest="git" autoUpdate="false" />
             </materials>
            <stage name="first">
                 <approval type="manual" />
             <jobs>
                  <job name="defaultJob">
                      <tasks>
                          <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                      </tasks>
                  </job>
             </jobs>
            </stage>
            <stage name="second">
             <approval type="manual" />
             <jobs>
               <job name="defaultJob">
                <tasks>
                     <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                </tasks>
                </job>
             </jobs>
            </stage>
            <stage name="third">
             <approval type="manual" />
              <jobs>
                 <job name="defaultJob">
                  <tasks>
                     <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                  </tasks>
                 </job>
              </jobs>
          </stage>
       </pipeline>
       <pipeline name="edit-pipeline">
            <materials>
                <git url="material-for-edit-pipeline" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                           <exec command="sleep">
                                <arg>10</arg>
                                <runif status="passed"/>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    <pipeline name="pipeline-2-manual-stages-that-run-till-file-exists" lockBehavior="lockOnFailure">
      <materials>
        <git url="material-for-pipeline-2-manual-stages-that-run-till-file-exists" dest="git" autoUpdate="false" materialName="gitMaterial"/>
      </materials>
      <stage name="defaultStage">
        <approval type="manual"/>
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="secondStage">
        <approval type="manual"/>
        <jobs>
          <job name="defaultJob">
            <tasks>
                  <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    </pipelines>
    <pipelines group="lock-pipelines">
     <pipeline name="pipeline-with-environment-variables">
         <environmentvariables>
          <variable name="PIPELINE_LEVEL_VARIABLE"><value>pipeline</value></variable>
          <variable name="ENV_LEVEL_VARIABLE_OVERRIDDEN_BY_PIPELINE"><value>pipeline-overrides-env</value></variable>
          <variable name="PIPELINE_LEVEL_VARIABLE_OVERRIDDEN_BY_STAGE"><value>does-not-matter</value></variable>
         <variable name="PIPELINE_LEVEL_VARIABLE_OVERRIDDEN_BY_JOB"><value>does-not-matter</value></variable>
         <variable name="ENV_LEVEL_VARIABLE_OVERRIDDEN_BY_TRIGGER"><value>does-not-matter</value></variable>
         <variable name="PIPELINE_LEVEL_VARIABLE_OVERRIDDEN_BY_TRIGGER"><value>does-not-matter</value></variable>
        </environmentvariables>
      <materials>
        <git url="material-for-environment-variables" dest="git" materialName="env-var-material" autoUpdate="false"/>
      </materials>
      <stage name="defaultStage">
        <approval type="manual"/>
        <environmentvariables>
          <variable name="STAGE_LEVEL_VARIABLE"><value>stage</value></variable>
          <variable name="PIPELINE_LEVEL_VARIABLE_OVERRIDDEN_BY_STAGE"><value>stage-overrides-pipeline</value></variable>
          <variable name="ENV_LEVEL_VARIABLE_OVERRIDDEN_BY_STAGE"><value>stage-overrides-env</value></variable>
          <variable name="STAGE_LEVEL_VARIABLE_OVERRIDDEN_BY_JOB"><value>does-not-matter</value></variable>
          <variable name="STAGE_LEVEL_VARIABLE_OVERRIDDEN_BY_TRIGGER"><value>does-not-matter</value></variable>
        </environmentvariables>
        <jobs>
          <job name="pipeline-with-environment-variables-job">
            <environmentvariables>
              <variable name="JOB_LEVEL_VARIABLE"><value>pipeline-with-environment-variables-job</value></variable>
              <variable name="PIPELINE_LEVEL_VARIABLE_OVERRIDDEN_BY_JOB"><value>job-overrides-pipeline</value></variable>
              <variable name="STAGE_LEVEL_VARIABLE_OVERRIDDEN_BY_JOB"><value>job-overrides-stage</value></variable>
              <variable name="ENV_LEVEL_VARIABLE_OVERRIDDEN_BY_JOB"><value>job-overrides-env</value></variable>
              <variable name="JOB_LEVEL_VARIABLE_OVERRIDDEN_BY_TRIGGER"><value>does-not-matter</value></variable>
            </environmentvariables>
            <tasks>
                <exec command="sleep">
                    <arg>5</arg>
                    <runif status="passed"/>
                </exec>
           </tasks>
          </job>
          <job name="another-job">
            <environmentvariables>
              <variable name="JOB_LEVEL_VARIABLE"><value>another-job</value></variable>
            </environmentvariables>
            <tasks>
              <exec command="ls"/>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="secondStage">
        <environmentvariables>
          <variable name="STAGE_LEVEL_VARIABLE"><value>stage</value></variable>
        </environmentvariables>
        <jobs>
          <job name="foo">
            <environmentvariables>
              <variable name="JOB_LEVEL_VARIABLE"><value>foo</value></variable>
              <variable name="PIPELINE_LEVEL_VARIABLE_OVERRIDDEN_BY_JOB"><value>job-overrides-pipeline</value></variable>
              <variable name="JOB_LEVEL_VARIABLE_OVERRIDDEN_BY_TRIGGER"><value>does-not-matter</value></variable>
            </environmentvariables>
            <tasks>
              <exec command="ls"/>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>

        <pipeline name="downstream-pipeline-api">
         <materials>
           <pipeline pipelineName="basic-pipeline-fast-api" stageName="defaultStage"/>
          <git url="material-for-downstream-pipeline" dest="git" materialName="downstream_git_material">
           <filter>
            <ignore pattern="**/*"/>
           </filter>
           </git>
         </materials>
         <stage name="defaultStage">
           <approval type="manual"/>
           <jobs>
            <job name="defaultJob">
             <tasks>
              <exec command="ls"/>
             </tasks>
            </job>
           </jobs>
          </stage>
         </pipeline>

         <pipeline name="run.till.file.exists-api">
            <materials>
                <git url="material-for-run.till.file.exists-api" dest="git" autoUpdate="false" materialName="git.material"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="sleep">
                            <arg>40</arg>
                            <runif status="passed"/>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="basic-pipeline-fast-api">
            <materials>
                <git url="material-for-basic-pipeline-fast-api" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls">
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="basic-pipeline-slow" lockBehavior="lockOnFailure">
          <materials>
           <git url="material-for-basic-pipeline-slow" dest="git" autoUpdate="false"/>
          </materials>
          <stage name="defaultStage">
           <approval type="manual"/>
           <jobs>
            <job name="defaultJob">
              <tasks>
                <exec command="sleep">
                            <arg>60</arg>
                            <runif status="passed"/>
                </exec>
              </tasks>
            </job>
           </jobs>
          </stage>
        </pipeline>
    <pipeline name="environment-pipeline">
      <materials>
        <git url="material-for-environment-pipeline" dest="git" autoUpdate="false"/>
      </materials>
      <stage name="defaultStage">
        <approval type="manual"/>
        <jobs>
          <job name="short">
            <tasks>
              <exec command="sleep" args="12"/>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="secondStage">
        <jobs>
          <job name="long">
            <tasks>
              <exec command="sleep" args="40"/>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="lastStage">
        <approval type="manual"/>
        <jobs>
          <job name="long">
            <tasks>
              <exec command="sleep" args="40"/>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="environment-pipeline-locked" lockBehavior="lockOnFailure">
      <materials>
        <git url="material-for-environment-pipeline-locked" dest="git-locked" autoUpdate="false"/>
      </materials>
      <stage name="defaultStage">
        <approval type="manual"/>
        <jobs>
          <job name="short">
            <tasks>
              <exec command="sleep" args="12"/>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="secondStage">
        <jobs>
          <job name="long">
            <tasks>
              <exec command="sleep" args="40"/>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="lastStage">
        <approval type="manual"/>
        <jobs>
          <job name="long">
            <tasks>
              <exec command="sleep" args="40"/>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    </pipelines>
    <pipelines group="operable">
        <authorization>
            <admins>
                <user>operate</user>
            </admins>
            <operate>
                <role>operator</role>
            </operate>
        </authorization>
        <pipeline name="operable-pipeline">
            <materials>
                <hg url="material-for-operable-pipeline" dest="hg" autoUpdate="false" materialName="admin-pipeline-hg"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="group.with.dot">
      <pipeline name="run.till.file.exists">
            <materials>
                <git url="material-for-pipeline" dest="git" autoUpdate="false" materialName="git.material"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="basic-pipeline-fast">
            <materials>
                <git url="material-for-basic-pipeline-fast" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls">
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="pipeline-run-till-file-exits" lockBehavior="lockOnFailure">
            <materials>
                <git url="material-for-pipeline-run-till-file-exits" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="wait-for-stop-job" lockBehavior="lockOnFailure">
            <materials>
                <git url="material-for-wait-for-stop-job" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="rake" args="wait_for_stopjob_file" workingdir="git"/>
                            <exec command="/bin/bash">
                                <arg>-c</arg>
                                <arg>echo "Second task completed"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="run-forever" lockBehavior="lockOnFailure">
            <materials>
                <git url="material-for-run-forever" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="rake" args="wait_forever" workingdir="git"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="timer-triggered" lockBehavior="lockOnFailure">
            <materials>
                <git url="material-for-timer-triggered" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls" workingdir="git"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>

        <pipeline name="long-mdu" lockBehavior="lockOnFailure">
            <materials>
                <git url="https://github.com/cirosantilli/test-many-commits-1m" dest="git" materialName="long_running_mdu" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="ls" workingdir="git"/>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>


        <pipeline name="pipeline-with-failing-stage" lockBehavior="lockOnFailure">
            <materials>
                <git url="material-for-pipeline-with-failing-stage" dest="git" materialName="git" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
                <approval type="manual"/>
                <jobs>
                <job name="defaultJob">
                    <tasks>
                    <exec command="executable-that-will-not-be-found"/>
                    </tasks>
                </job>
                </jobs>
            </stage>
            <stage name="secondStage">
        <approval type="manual"/>
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="sleep">
                            <arg>60</arg>
                            <runif status="passed"/>
                          </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
        </pipeline>
        <pipeline name="basic-pipeline">
            <materials>
              <hg url="material-for-basic-pipeline" dest="hg" autoUpdate="false"/>
            </materials>
            <stage name="defaultStage">
             <approval type="manual"/>
              <jobs>
                <job name="defaultJob">
                   <tasks>
                    <exec command="ls"/>
                   </tasks>
                </job>
              </jobs>
             </stage>
          </pipeline>
    </pipelines>


  <pipelines group="group-for-dependency-walk-1">
    <authorization>
      <view>
        <user>pavan</user>
      </view>
      <operate>
        <user>operate</user>
        <role>operator</role>
      </operate>
      <admins>
        <role>misc</role>
      </admins>
    </authorization>
    <pipeline name="first-pipeline" template="simple-pass">
      <mingle baseUrl="https://mingle-different.example.com" projectIdentifier="my_project">
        <mqlGroupingConditions>status &gt; 'In Dev'</mqlGroupingConditions>
      </mingle>
      <materials>
        <git url="material-for-first-pipeline" dest="git" materialName="git-first-pipeline" autoUpdate="false"/>
      </materials>
    </pipeline>
    <pipeline name="pipeline-in-environment" template="simple-pass">
      <materials>
        <git url="material-for-pipeline-in-environment" dest="git" materialName="git-pipeline-in-environment" autoUpdate="false"/>
      </materials>
    </pipeline>
  </pipelines>

  <pipelines group="group-for-dependency-walk-2">
    <authorization>
      <view>
        <user>raghu</user>
        <user>pavan</user>
        <role>operator</role>
        <role>misc</role>
      </view>
      <operate>
        <user>operate</user>
        <role>operator</role>
      </operate>
    </authorization>
    <pipeline name="down-pipeline" template="simple-pass">
      <mingle baseUrl="https://mingle-different.example.com" projectIdentifier="my_project">
        <mqlGroupingConditions>status &gt; 'Dev Complete'</mqlGroupingConditions>
      </mingle>
      <materials>
        <git url="material-for-down-pipeline" dest="git" autoUpdate="false" materialName="git-down-pipeline"/>
        <pipeline pipelineName="first-pipeline" stageName="defaultStage"/>
      </materials>
    </pipeline>
  </pipelines>

    <!-- Add this template creation and adding template admin to the spec ones API supports updating authoriztion -->
    <templates>
      <pipeline name="simple-pass">
	        <stage name="defaultStage">
	        	<approval type="manual"/>
	        	<jobs>
	            	<job name="defaultJob">
	                    <tasks>
	                        <exec command="ls"/>
	                    </tasks>
	                 </job>
	            </jobs>
		  	</stage>
	  </pipeline>
      <pipeline name="Template-With-Admin">
        <authorization>
          <admins>
            <user>templateadmin</user>
          </admins>
        </authorization>
        <stage name="defaultStage">
            <approval type="manual"/>
            <jobs>
                <job name="defaultJob">
                    <tasks>
                        <exec command="ls" />
                    </tasks>
                </job>
            </jobs>
        </stage>
    </pipeline>
  </templates>
    <environments>
  		<environment name="uat">
  		  <environmentvariables>
          <variable name="ENV_LEVEL_VARIABLE"><value>environment</value></variable>
          <variable name="ENV_LEVEL_VARIABLE_OVERRIDDEN_BY_PIPELINE"><value>does-not-matter</value></variable>
          <variable name="ENV_LEVEL_VARIABLE_OVERRIDDEN_BY_STAGE"><value>does-not-matter</value></variable>
          <variable name="ENV_LEVEL_VARIABLE_OVERRIDDEN_BY_JOB"><value>does-not-matter</value></variable>
          <variable name="ENVIRONMENT_LEVEL_VARIABLE_OVERRIDDEN_BY_TRIGGER"><value>does-not-matter</value></variable>
			  </environmentvariables>
       <pipelines>
       <pipeline name="pipeline-with-environment-variables"/>
      </pipelines>
      </environment>
  	</environments>
</cruise>
